{"meta":{"title":"ligangit","subtitle":"时光，不会辜负每一个默默努力的人","description":"在码农的世界里面默默的挣扎着","author":"Li Gang","url":"http://ligangit.com","root":"/"},"pages":[],"posts":[{"title":"mysql存储过程学习","slug":"mysql存储过程编写","date":"2019-09-29T01:20:49.000Z","updated":"2019-09-29T05:03:11.830Z","comments":true,"path":"2019/09/29/mysql存储过程编写/","link":"","permalink":"http://ligangit.com/2019/09/29/mysql存储过程编写/","excerpt":"","text":"mysql存储过程学习1、申明存储过程1CREATE DEFINER = CURRENT_USER PROCEDURE `demo`() 2、存储过程开始和结束符号所有的内容SQL语句都是写在BEGIN END 里面。 123BEGIN #Routine body goes here...END; 3、变量定义 int类型： 变量名 num，类型 int，无符号， 默认值 4000000。（默认值可以不设置，即 default 4000000可去掉） 1DECLARE num int unsigned default 4000000; varchar类型： 变量名Mobile ，类型VARCHAR，长度50，默认值 hello。（默认值可以不设置，即 default ‘hello’ 可去掉） 编码格式 charset ‘utf8’ 设置编码格式为utf8。 1DECLARE Mobile VARCHAR(50) default &apos;hello&apos; charset &apos;utf8&apos;; 4、变量赋值 已定义变量赋值(局部变量) 方法一：使用set 1set Mobile=&apos;world&apos;; 方法二：使用select …. into… 1234select mobile into Mobile from students where id=1; 未定义变量直接赋值（用户变量） 方法一：使用set 1set @email=&apos;12345@qq.com&apos;; 方法二：使用select …. into… 12set @email=&apos;&apos;;select @email :=email from students; 5、条件语句 if-then-else语句 123if startyear&gt;2016 then select name from students;end if; 12345if startyear&gt;2016 then select name from students;else select email from students;end if; case语句 1x 1declare var int; 2set var=0;3case var4when 0 then5 select name from students;6when 1 then7 select email from students;8else9 select mobile from students;10end case;mysql 6、循环语句 while ···· end while 123456declare var int; set var=0;while var&lt;3 do select name from students where id=var; set var=var+1;end while; repeat···· end repea 操作后判断循环条件，while是先判断循环条件在执行循环体。 1234567declare var int; set var=0;repeat select name from students where id=var; set var=var+1;until var&gt;2end repeat; loop ·····endloop loop 循环不需要初始条件，这点和 while 循环相似，同时和 repeat 循环一样不需要结束条件, leave 语句的意义是离开循环。 12345678declare var int; set var=0;LOOP_LABLE:loop set var=var+1; if var&gt;2 then leave LOOP_LABLE; end if;end loop; 7、游标的使用 定义游标及数据 1234-- mobile变量接收游标中的值DECLARE Mobile VARCHAR(50) ; DECLARE UpdateAuthorCursor CURSOR for SELECT name from students; 设置游标内容执行完毕标志 1DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; 打开游标 1open UpdateAuthorCursor; 循环游标内数据 123456789posLoop:LOOP --判断是否结束循环 if done then leave posLoop; end if; --取出游标中的数据，并保存在变量中 FETCH UpdateAuthorCursor into Mobile; update students set mobile=Mobile where id=0; end LOOP; 关闭游标 1close UpdateAuthorCursor; 8、示例1234567891011121314151617181920212223242526272829303132333435363738394041424344-- 创建存储过程CREATE DEFINER=`root`@`localhost` PROCEDURE `merge2019`()BEGIN-- 定义变量DECLARE yearnum int DEFAULT year(CURRENT_DATE); DECLARE Mobile VARCHAR(50) ; DECLARE Content VARCHAR(3200) ; DECLARE Taskid VARCHAR(255) ; DECLARE Sendtime VARCHAR(255) ; -- 创建游标 DECLARE done INT DEFAULT FALSE; DECLARE UpdateAuthorCursor CURSOR for SELECT b.CONTENT,b.MOBILE , case when b.TASKID is not null then b.TASKID else &apos;&apos; end as TASKID , DATE_FORMAT(b.SENDTIME,&apos;%Y-%m-%d&apos;) as sendtime FROM jx_sendresult_2019_1 b; -- 设置游标循环结束标志 DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;-- 打开游标 OPEN UpdateAuthorCursor; -- 循环游标内容 read_loop: LOOP FETCH UpdateAuthorCursor INTO Content, Mobile, Taskid, Sendtime; -- 设置循环结束标识 IF done THEN LEAVE read_loop; END IF; -- 执行SQL操作 select count(1) from tbl_smresult; UPDATE tbl_smresult_2019_2 SET MSGID = Taskid WHERE SM_CONTENT= Content and DESTADDR= Mobile and MSGID =&apos;&apos; and DATE_FORMAT(SENDTIME,&apos;%Y-%m-%d&apos;)=Sendtime limit 1; COMMIT; END LOOP; -- 关闭游标 CLOSE UpdateAuthorCursor; -- 结束存储过程END","categories":[{"name":"mysql","slug":"mysql","permalink":"http://ligangit.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://ligangit.com/tags/mysql/"},{"name":"存储过程","slug":"存储过程","permalink":"http://ligangit.com/tags/存储过程/"},{"name":"游标","slug":"游标","permalink":"http://ligangit.com/tags/游标/"}]},{"title":"取出hibernate执行的SQL的结果集","slug":"取出hibernate执行的SQL的结果集","date":"2019-09-25T09:34:56.000Z","updated":"2019-09-27T10:02:58.601Z","comments":true,"path":"2019/09/25/取出hibernate执行的SQL的结果集/","link":"","permalink":"http://ligangit.com/2019/09/25/取出hibernate执行的SQL的结果集/","excerpt":"","text":"取出hibernate执行的SQL的结果集java取出数据报错最近在一个SSH项目中碰到了一个获取数据的问题，SQL执行后的结果集使用类型转换提取数据时报错。 下面是DAO层实现类中的方法：返回了结果集List。 1234567891011121314151617181920public List&lt;TblSwitch&gt; getPagelist(Integer limit, Integer offser, String where, Object[] obj) &#123; logger.info(\"get getPagelist by:\"); String sql=\"select a.add_user, \" + \" a.old_protocol,a.now_protocol,a.mobile,a.add_time,a.delete_mark,a.update_time,a.id,a.remark \" + \" from tbl_switch a where 1=1 and a.delete_mark=0 \"+where+\" ORDER BY a.add_time DESC \"; List&lt;TblSwitch&gt; list=null; try&#123; Query query=this.getSession().createSQLQuery(sql).setFirstResult(limit).setMaxResults(offser); if(null !=obj&amp;&amp;obj.length&gt;0)&#123; for(int i=0;i&lt;obj.length;i++)&#123; query.setParameter(i, obj[i]); &#125; &#125; list=query.list(); &#125;catch(Exception e)&#123; logger.error(\"get page getPagelist error:\"+e.getMessage()); e.printStackTrace(); &#125; return list; &#125; 在控制层对结果集list进行操作 ​ 当我想对结果集进行操作的时候，发现无法对类型进行强制转换（将list中的每个对象强转为TblSwitch类型），在这条语句中会报错，但是我需要取出每个对象的内容。 123for (int i = 0; i &lt; list.size(); i++) &#123; TblSwitch tblSwitch1=list.get(i); &#125; ​ 强转Map同样报错 1Map&lt;String, Object&gt; dataMap = (Map&lt;String, Object&gt;) list.get(i); ​ 强转Map报错信息： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454627-Sep-2019 15:47:26.547 涓ラ噸 [http-nio-8080-exec-8] org.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() for servlet [msg] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to java.util.Map] with root cause java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to java.util.Map at com.zhirong.base.web.SwitchNumberController.popSumExport(SwitchNumberController.java:547) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:176) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:426) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:414) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:203) at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:181) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:650) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:800) at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:806) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1498) at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:745) 解决方法：方法一：​ 将对象赋值给Object map，这时map中有list中的对象的数据，但是不能用map.getAddUser()的方法获取，这时我将map强制转换成了Object[] objs，这样就将一个对象的属性用数组的形式保存起来了，通过数组下标取值，获取数据。 12345678910111213141516171819for (int i = 0; i &lt; list.size(); i++) &#123; Object map=list.get(i); Object[] objs=(Object[])map; //强转object数组对象 if (null!=objs[0])&#123; adduser=objs[0].toString(); &#125; if (null!=objs[1])&#123; oldProtocol=objs[1].toString(); &#125; if (null!=objs[2])&#123; nowProtocol=objs[2].toString(); &#125; if (null!=objs[3])&#123; mobile=objs[3].toString(); &#125; if (null!=objs[4])&#123; addtime=objs[4].toString(); &#125; &#125; 方法二：​ 将SQL结果返回值设置为List，不在是List，这时在遍历list的时候可以将list中的对象强转为Map类型。 修改返回值： 1234567891011121314151617181920public List getPagelist(Integer limit, Integer offser,String where, Object[] obj) &#123; logger.info(\"get getPagelist by:\"); String sql=\"select a.add_user, \" + \" a.old_protocol,a.now_protocol,a.mobile,a.add_time,a.delete_mark,a.update_time,a.id,a.remark \" + \" from tbl_switch a where 1=1 and a.delete_mark=0 \"+where+\" ORDER BY a.add_time DESC \"; List list=null; try&#123; Query query=this.getSession().createSQLQuery(sql).setFirstResult(limit).setMaxResults(offser); if(null !=obj&amp;&amp;obj.length&gt;0)&#123; for(int i=0;i&lt;obj.length;i++)&#123; query.setParameter(i, obj[i]); &#125; &#125; list=query.list(); &#125;catch(Exception e)&#123; logger.error(\"get page getPagelist error:\"+e.getMessage()); e.printStackTrace(); &#125; return list;&#125; 使用Map接收list的对象 1Map&lt;String, Object&gt; dataMap = (Map&lt;String, Object&gt;) list.get(i); 页面取值页面取值也是同样使用下标获取数据。 c:if 判断list是否为空； 1&lt;c:if test=\"$&#123;null != list&#125;\"&gt; c:forEach 遍历list； 1&lt;c:forEach items=\"$&#123;list&#125;\" var=\"dataList\" varStatus=\"status\"&gt; ${} 取值，利用下标确定对象中的某个属性。 1$&#123;dataList[3]&#125; 页面部分代码 123456789101112131415161718192021222324252627282930313233343536373839 &lt;c:if test=\"$&#123;null != list&#125;\"&gt; &lt;c:forEach items=\"$&#123;list&#125;\" var=\"dataList\" varStatus=\"status\"&gt; &lt;c:choose&gt; &lt;c:when test=\"$&#123;status.count % 2 == 0&#125;\"&gt; &lt;tr style=\"background-color:#FFFFFF\" onclick=\"Zving.DataGrid.onRowClick(this,event);\"&gt; &lt;/c:when&gt; &lt;c:otherwise&gt; &lt;tr style=\"background-color:#F9FBFC\" onclick=\"Zving.DataGrid.onRowClick(this,event);\"&gt; &lt;/c:otherwise&gt; &lt;/c:choose&gt; &lt;td rowno=\"$&#123;(page.page*page.rows) + (status.index+1) &#125;\" class=\"rowNo\" style=\"text-align: center;\"&gt; $&#123;(status.index+1)+(page.page*page.rows)&#125; &lt;/td&gt; &lt;td title=\"$&#123;dataList[3] &#125;\" style=\"text-align: center;\"&gt; $&#123;dataList[3]&#125; &lt;/td&gt; &lt;td title=\"$&#123;dataList[1] &#125;\" style=\"text-align: center;\"&gt; &lt;c:if test=\"$&#123;dataList[1]=='0'&#125;\"&gt;移动&lt;/c:if&gt; &lt;c:if test=\"$&#123;dataList[1]=='1'&#125;\"&gt;联通&lt;/c:if&gt; &lt;c:if test=\"$&#123;dataList[1]=='2'&#125;\"&gt;电信&lt;/c:if&gt; &lt;/td&gt; &lt;td title=\"$&#123;dataList[2] &#125;\" style=\"text-align: center;\"&gt; &lt;c:if test=\"$&#123;dataList[2]=='0'&#125;\"&gt;移动&lt;/c:if&gt; &lt;c:if test=\"$&#123;dataList[2]=='1'&#125;\"&gt;联通&lt;/c:if&gt; &lt;c:if test=\"$&#123;dataList[2]=='2'&#125;\"&gt;电信&lt;/c:if&gt; &lt;/td&gt; &lt;td title=\"&lt;fmt:formatDate value=\"$&#123;dataList[4]&#125;\" pattern=\"yyyy-MM-dd\" /&gt;\" style=\"text-align: center;\"&gt; &lt;fmt:formatDate value=\"$&#123;dataList[4]&#125;\" pattern=\"yyyy-MM-dd\" /&gt; &lt;/td&gt; &lt;td title=\"$&#123;dataList[0]&#125;\" style=\"text-align: center;\"&gt;$&#123;dataList[0]&#125;&lt;/td&gt; &lt;td title=\"\" style=\"text-align: center;\"&gt; &amp;nbsp;&amp;nbsp; &lt;a href=\"#\" onclick=\"return doUpdate($&#123;dataList[7]&#125;)\"&gt;修改&lt;/a&gt; &amp;nbsp;&amp;nbsp; &lt;a href=\"#\" onclick=\"return del($&#123;dataList[7]&#125;)\"&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt;&lt;/c:if&gt;","categories":[{"name":"java","slug":"java","permalink":"http://ligangit.com/categories/java/"}],"tags":[{"name":"hibernate","slug":"hibernate","permalink":"http://ligangit.com/tags/hibernate/"},{"name":"object","slug":"object","permalink":"http://ligangit.com/tags/object/"},{"name":"java","slug":"java","permalink":"http://ligangit.com/tags/java/"},{"name":"bug","slug":"bug","permalink":"http://ligangit.com/tags/bug/"}]},{"title":"Typora学习md语法","slug":"Typoras学习md语法","date":"2019-09-04T08:41:07.000Z","updated":"2019-09-27T10:06:22.997Z","comments":true,"path":"2019/09/04/Typoras学习md语法/","link":"","permalink":"http://ligangit.com/2019/09/04/Typoras学习md语法/","excerpt":"","text":"用Typora学习.MD语法1、标题 语法 12345# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题 2、引用 语法 123&gt; 引用内容1&gt; 引用内容2&gt;&gt; 引用内容3 效果 引用内容1 引用内容2 引用内容3 3、列表3.1 无序列表 语法 123* 无序列表1+ 无序列表2_ 无序列表3 效果 无序列表1 无序列表2 无序列表3 3.2 多行无序列表 语法 123* 多行无序列表1TAB键 * 多行无序列表2TAB键 TAB键 * 多行无序列表3 效果 多行无序列表1 多行无序类表2 多行无序列表3 语法2 123* 多行无序类表1TAB键 多行无序列表2TAB键 多行无序列表3 效果2 多行无序类表1 多行无序列表2 多行无序列表3 3.3 有序列表 语法 1231. 有序列表12. 有序列表23. 有序类表3 效果 有序类表1 有序列表2 有序列表3 3.4 多行有序列表 语法 12345671. 多行有序类表12. 多行有序列表2 1. 多行有序列表2-1 2. 多行有序列表2-23. 多行有序列表3 1. 多行有序列表3-1 2. 多行有序列表3-2 效果 多行有序列表1 多行有序列表2 多行有序列表2-1 多行有序列表2-2 多行有序列表3 多行有序列表3-1 多行有序列表3-2 3.5 任务列表 语法 123-[ ] 起床-[x] 洗漱-[ ] 吃早餐 效果 -[ ] 起床 -[x] 洗漱 -[ ] 吃早餐 3.6表格 语法 123456|姓名|性别|年龄|手机号|邮箱||:---|:--:|:--:|:--:|---:||张三|男|20|18799999999|123456@qq.com||李四|女|19|18799999999|123456@qq.com||王五|男|21|18799999999|123456@qq.com||赵六|女|17|18799999999|123456qq.com| 效果 姓名 性别 年龄 手机号 邮箱 张三 男 20 18799999999 123456@qq.com 李四 女 19 18799999999 123456@qq.com 王五 男 21 18799999999 123456@qq.com 赵六 女 17 18799999999 123456@qq.com 4. 链接4.1 图片 语法1（本地图片） 1![图片上传失败...(hello.png)](hello.png) 效果 语法2（网络图片） 1![typora.jpg](https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 效果 4.2 超链接 语法1（行内式） 12[无标题](https://www.baidu.com)[有标题][https://www.baidu.com \"此处是标题\"] 效果1 [无标题][https://www.baidu.com] [有标题][https://www.baidu.com “此处是标题”] 语法2（参数式） 1234[方式1]:https://www.baidu.com \"参数\"[方式2]:https://www.baidu.com '参数'[方式3]:https://www.baidu.com (参数)[方式4]:&lt;https://www.baidu.com&gt; \"参数\" 效果2 语法3（链接显示） 1&lt;https://www.ligangit.com&gt; 效果3 https://www.ligangit.com 5. 字体样式5.1 斜体 语法 12*斜体*_斜体_ 效果 斜体 斜体 5.2 加粗 语法 12**加粗**__加粗__ 效果 加粗 加粗 5.3 下划线 语法 1&lt;u&gt;下划线&lt;/u&gt; 效果 下划线 5.4 删除线 语法 1~~删除线~~ 效果 删除线 5.5 分割线 语法 1--- 效果 5.6 转义 语法 123456\\\\\\*\\+\\-\\`\\_ 效果 \\*+-`_","categories":[{"name":"博客","slug":"博客","permalink":"http://ligangit.com/categories/博客/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://ligangit.com/tags/markdown/"},{"name":"Typoras","slug":"Typoras","permalink":"http://ligangit.com/tags/Typoras/"}]},{"title":"layui学习","slug":"layui学习","date":"2019-09-04T08:41:07.000Z","updated":"2019-09-05T06:09:36.814Z","comments":true,"path":"2019/09/04/layui学习/","link":"","permalink":"http://ligangit.com/2019/09/04/layui学习/","excerpt":"","text":"layui学习","categories":[{"name":"博客","slug":"博客","permalink":"http://ligangit.com/categories/博客/"}],"tags":[{"name":"layui","slug":"layui","permalink":"http://ligangit.com/tags/layui/"},{"name":"框架","slug":"框架","permalink":"http://ligangit.com/tags/框架/"}]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2019-07-27T04:21:16.000Z","updated":"2019-08-04T02:43:08.099Z","comments":true,"path":"2019/07/27/我的第一篇博客文章/","link":"","permalink":"http://ligangit.com/2019/07/27/我的第一篇博客文章/","excerpt":"","text":"第一章内容 第二章内容 参考文献www.codesheep.cn","categories":[{"name":"博客","slug":"博客","permalink":"http://ligangit.com/categories/博客/"}],"tags":[{"name":"test","slug":"test","permalink":"http://ligangit.com/tags/test/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-07-27T04:03:57.408Z","updated":"2019-07-27T04:03:57.409Z","comments":true,"path":"2019/07/27/hello-world/","link":"","permalink":"http://ligangit.com/2019/07/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}